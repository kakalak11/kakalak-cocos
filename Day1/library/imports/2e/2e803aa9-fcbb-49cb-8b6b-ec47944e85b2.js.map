{"version":3,"sources":["../../../../assets/Script/assets/Script/utils.js"],"names":["console","log","utilities","check","passWordCheck","password","passwordArray","split","countUpper","countLower","isUpperCase","isLowerCase","forEach","parseInt","element","toUpperCase","toLowerCase","userNameCheck","username","spChars","test","emailCheck","string","emailFormat","slice","indexOf","emailFormatList","includes","checkStringLength","limit","length","displayError","labelNode","color","cc","Color","RED","parent","active","label","getComponent","displayCorrect","GREEN","primeNumber","number","array","Array","fill","primeArray","i","push","j","factorial","generateRainbowText","rainbowColor","result","stringArray","index","temp","module","exports"],"mappings":";;;;;;AAAAA,QAAQC,GAAR,CAAY,WAAZ;;AAEA,IAAIC,YAAY;AACZC,WAAO;AAAA,eAAMH,QAAQC,GAAR,CAAY,mBAAZ,CAAN;AAAA,KADK;AAEZG,mBAAe,uBAAUC,QAAV,EAAoB;AAC/B,YAAIC,gBAAgBD,SAASE,KAAT,CAAe,EAAf,CAApB;AACA,YAAIC,aAAa,CAAjB;AACA,YAAIC,aAAa,CAAjB;;AAEA,YAAI,CAACC,YAAYJ,aAAZ,CAAD,IAA+B,CAACK,YAAYL,aAAZ,CAApC,EAAgE;AAC5D,mBAAO,KAAP;AACH;;AAED,iBAASI,WAAT,CAAqBL,QAArB,EAA+B;AAC3BA,qBAASO,OAAT,CAAiB,mBAAW;AACxB,oBAAIC,SAASC,OAAT,CAAJ,EAAuB;AACvB,oBAAIA,YAAYA,QAAQC,WAAR,EAAhB,EAAuCP;AAC1C,aAHD;AAIA,gBAAIA,UAAJ,EAAgB,OAAO,IAAP;AAChB,mBAAO,KAAP;AACH;;AAED,iBAASG,WAAT,CAAqBN,QAArB,EAA+B;AAC3BA,qBAASO,OAAT,CAAiB,mBAAW;AACxB,oBAAIC,SAASC,OAAT,CAAJ,EAAuB;AACvB,oBAAIA,YAAYA,QAAQE,WAAR,EAAhB,EAAuCP;AAC1C,aAHD;AAIA,gBAAIA,UAAJ,EAAgB,OAAO,IAAP,CAAhB,KACK,OAAO,KAAP;AACR;AACD,eAAO,IAAP;AACH,KA7BW;AA8BZQ,mBAAe,uBAAUC,QAAV,EAAoB;AAC/B,YAAIC,UAAU,wCAAd;AACA,YAAIA,QAAQC,IAAR,CAAaF,QAAb,CAAJ,EAA4B;AACxB,mBAAO,KAAP;AACH;AACD,eAAO,IAAP;AACH,KApCW;AAqCZG,gBAAY,oBAAUC,MAAV,EAAkB;AAC1B,YAAIC,cAAcD,OAAOE,KAAP,CAAaF,OAAOG,OAAP,CAAe,GAAf,CAAb,CAAlB;AACA,YAAIC,kBAAkB,CAAC,YAAD,EAAe,YAAf,CAAtB;AACA,eAAOA,gBAAgBC,QAAhB,CAAyBJ,WAAzB,CAAP;AACH,KAzCW;AA0CZK,uBAAmB,2BAAUN,MAAV,EAAkBO,KAAlB,EAAyB;AACxC,YAAIP,OAAOQ,MAAP,GAAgBD,KAApB,EAA2B,OAAO,KAAP;AAC3B,eAAO,IAAP;AACH,KA7CW;AA8CZE,kBAAc,sBAAUC,SAAV,EAAqBV,MAArB,EAA6B;AACvCU,kBAAUC,KAAV,GAAkBC,GAAGC,KAAH,CAASC,GAA3B;AACAJ,kBAAUK,MAAV,CAAiBC,MAAjB,GAA0B,IAA1B;AACA,YAAIC,QAAQP,UAAUQ,YAAV,CAAuB,UAAvB,CAAZ;AACAD,cAAMjB,MAAN,GAAeA,MAAf;AACA;AACH,KApDW;AAqDZmB,oBAAgB,wBAAUT,SAAV,EAAqBV,MAArB,EAA6B;AACzCU,kBAAUC,KAAV,GAAkBC,GAAGC,KAAH,CAASO,KAA3B;AACAV,kBAAUK,MAAV,CAAiBC,MAAjB,GAA0B,IAA1B;AACA,YAAIC,QAAQP,UAAUQ,YAAV,CAAuB,UAAvB,CAAZ;AACAD,cAAMjB,MAAN,GAAeA,MAAf;AACA;AACH,KA3DW;AA4DZqB,iBAAa,qBAAUC,MAAV,EAAkB;AAC3B,YAAIC,QAAQC,MAAMF,MAAN,EAAcG,IAAd,CAAmB,IAAnB,CAAZ;AACA,YAAIC,aAAa,EAAjB;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,MAApB,EAA4BK,GAA5B,EAAiC;AAC7B,gBAAIJ,MAAMI,CAAN,MAAa,IAAjB,EAAuB;AACnBD,2BAAWE,IAAX,CAAgBD,CAAhB;AACA,qBAAK,IAAIE,IAAIF,IAAIA,CAAjB,EAAoBE,IAAIP,MAAxB,EAAgCO,KAAKF,CAArC,EAAwC;AACpCJ,0BAAMM,CAAN,IAAW,CAAX;AACH;AACJ;AACJ;AACD,eAAOH,UAAP;AACH,KAzEW;AA0EZI,eAAW,mBAAUR,MAAV,EAAkB;AACzB,YAAIA,WAAW,CAAX,IAAgBA,WAAW,CAA/B,EAAkC,OAAO,CAAP;;AAElC,eAAOA,SAAS,KAAKQ,SAAL,CAAeR,SAAS,CAAxB,CAAhB;AACH,KA9EW;AA+EZS,yBAAqB,6BAAU/B,MAAV,EAAkB;AACnC,YAAIgC,eAAe,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,SAAnE,EAA8E,SAA9E,EAAyF,SAAzF,EAAoG,SAApG,EAA+G,SAA/G,EAA0H,SAA1H,EAAqI,SAArI,EAAgJ,SAAhJ,EACf,SADe,EACJ,SADI,EACO,UADP,EACmB,SADnB,EAC8B,SAD9B,EACyC,SADzC,EACoD,SADpD,EAC+D,SAD/D,EAC0E,SAD1E,EACqF,SADrF,EACgG,SADhG,CAAnB;AAEA,YAAIC,SAAS,EAAb;AACA,YAAIC,cAAclC,OAAOf,KAAP,CAAa,EAAb,CAAlB;AACAiD,oBAAY5C,OAAZ,CAAoB,UAACE,OAAD,EAAU2C,KAAV,EAAoB;AACpC,gBAAIxB,QAAQqB,aAAaG,QAAQH,aAAaxB,MAAlC,CAAZ;AACA,gBAAI4B,mBAAiBzB,KAAjB,SAA0BnB,OAA1B,SAAJ;AACAyC,sBAAUG,IAAV;AACH,SAJD;AAKA,eAAOH,MAAP;AACH;AA1FW,CAAhB;;AA6FAI,OAAOC,OAAP,GAAiB1D,SAAjB","file":"utils.js","sourceRoot":"../../../../assets/Script","sourcesContent":["console.log('Utilities');\n\nvar utilities = {\n    check: () => console.log('utilities has run'),\n    passWordCheck: function (password) {\n        let passwordArray = password.split('');\n        let countUpper = 0;\n        let countLower = 0;\n\n        if (!isUpperCase(passwordArray) || !isLowerCase(passwordArray)) {\n            return false;\n        }\n\n        function isUpperCase(password) {\n            password.forEach(element => {\n                if (parseInt(element)) return;\n                if (element === element.toUpperCase()) countUpper++;\n            });\n            if (countUpper) return true;\n            return false;\n        }\n\n        function isLowerCase(password) {\n            password.forEach(element => {\n                if (parseInt(element)) return;\n                if (element === element.toLowerCase()) countLower++;\n            });\n            if (countLower) return true;\n            else return false;\n        }\n        return true;\n    },\n    userNameCheck: function (username) {\n        let spChars = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;\n        if (spChars.test(username)) {\n            return false;\n        }\n        return true;\n    },\n    emailCheck: function (string) {\n        let emailFormat = string.slice(string.indexOf('@'));\n        let emailFormatList = ['@gmail.com', '@yahoo.com'];\n        return emailFormatList.includes(emailFormat);\n    },\n    checkStringLength: function (string, limit) {\n        if (string.length < limit) return false;\n        return true;\n    },\n    displayError: function (labelNode, string) {\n        labelNode.color = cc.Color.RED;\n        labelNode.parent.active = true;\n        let label = labelNode.getComponent('cc.Label');\n        label.string = string;\n        return;\n    },\n    displayCorrect: function (labelNode, string) {\n        labelNode.color = cc.Color.GREEN;\n        labelNode.parent.active = true;\n        let label = labelNode.getComponent('cc.Label');\n        label.string = string;\n        return;\n    },\n    primeNumber: function (number) {\n        let array = Array(number).fill(true);\n        let primeArray = [];\n\n        for (let i = 2; i < number; i++) {\n            if (array[i] === true) {\n                primeArray.push(i);\n                for (let j = i * i; j < number; j += i) {\n                    array[j] = 0\n                }\n            }\n        }\n        return primeArray;\n    },\n    factorial: function (number) {\n        if (number === 0 || number === 1) return 1;\n\n        return number * this.factorial(number - 1);\n    },\n    generateRainbowText: function (string) {\n        let rainbowColor = ['#ff0000', '#ff4000', '#ff8000', '#ffbf00', '#ffff00', '#bfff00', '#80ff00', '#40ff00', '#00ff00', '#00ff40', '#00ff80', '#00ffbf', '#00ffff', '#00bfff',\n            '#0080ff', '#0040ff', '\t#0000ff', '#4000ff', '#8000ff', '#bf00ff', '#ff00ff', '#ff00bf', '#ff0080', '#ff0040', '#ff0000'];\n        let result = '';\n        let stringArray = string.split('');\n        stringArray.forEach((element, index) => {\n            let color = rainbowColor[index % rainbowColor.length];\n            let temp = `<color=${color}>${element}</c>`;\n            result += temp;\n        })\n        return result;\n    },\n}\n\nmodule.exports = utilities;"]}